// lib/main.dart
//
// Single‑file example that wires Firebase Auth (e‑mail / password) to a
// Sign‑Up screen and a Login screen, then hands the user off to HomePage
// once authenticated.  Only AuthWrapper decides which page to show.
//
// ────────────────────────────────────────────────────────────────────────────
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

// ── Firebase ───────────────────────────────────────────────────────────────
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart';        // generated by FlutterFire CLI v1.2+

// ── App pages ──────────────────────────────────────────────────────────────
import 'SignUp_page.dart';
import 'home.dart';

/// Route names that are left after simplification.
class Routes {
  Routes._();                               // no instances
  static const signup = '/signup';
  static const home   = '/home';
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Pass the platform‑specific options generated by FlutterFire CLI.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static const _brandTeal = Color(0xFF4CAFAD);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pet Finance Tracker',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        primaryColor: _brandTeal,
        colorScheme: ColorScheme.fromSeed(seedColor: _brandTeal),
        scaffoldBackgroundColor: const Color(0xFFF9FEFD),
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(foregroundColor: _brandTeal),
        ),
      ),

      // The **only** entry point: AuthWrapper decides where to go.
      home: const AuthWrapper(),

      // Extra pages you can push to.
      routes: {
        Routes.signup: (_) => const SignUpPage(),
        Routes.home:   (_) => const HomePage(),    // rarely needed manually
      },
    );
  }
}

/// Listens to FirebaseAuth; shows LoginPage if logged‑out and HomePage if
/// logged‑in.  Rebuilds automatically when auth state changes.
class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snap) {
        if (snap.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }
        return snap.hasData ? const HomePage() : const LoginPage();
      },
    );
  }
}

// ───────────────────────────────────────────────────────────────────────────
//  LOGIN PAGE  – minimal email / password sign‑in
//  (identical to your previous version, except it no longer pushes /login)
// ───────────────────────────────────────────────────────────────────────────
class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _formKey  = GlobalKey<FormState>();
  final _emailCtl = TextEditingController();
  final _pwdCtl   = TextEditingController();

  bool   _hidePwd = true;
  bool   _busy    = false;
  String _lottie  = 'assets/animations/pet_idle.json';

  final _emailRx = RegExp(r'^[^@\s]+@[^@\s]+\.[^@\s]+$');

  @override
  void dispose() {
    _emailCtl.dispose();
    _pwdCtl.dispose();
    super.dispose();
  }

  InputDecoration _decor(String label, IconData icon, {Widget? suffix}) =>
      InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon),
        suffixIcon: suffix,
      );

  Future<void> _signIn() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _busy = true);
    try {
      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: _emailCtl.text.trim(),
        password: _pwdCtl.text,
      );
      if (!mounted) return;
      // AuthWrapper will automatically rebuild and show HomePage.
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('Login successful')));
    } on FirebaseAuthException catch (e) {
      setState(() => _lottie = 'assets/animations/pet_error.json');
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(e.message ?? 'Login failed')));
    } finally {
      if (mounted) setState(() => _busy = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: Container(
        decoration: const BoxDecoration(
          gradient: RadialGradient(
            center: Alignment.topCenter,
            radius: 1.2,
            colors: [Color(0xFFEAFDF7), Color(0xFFF9FEFD)],
          ),
        ),
        child: SafeArea(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
            child: Column(
              children: [
                const SizedBox(height: 24),
                Lottie.asset(_lottie,
                    width: 140, height: 140, fit: BoxFit.contain),
                const SizedBox(height: 24),

                // ── Form ──────────────────────────────────────────
                Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      TextFormField(
                        controller: _emailCtl,
                        decoration:
                        _decor('Email address', Icons.mail_outline),
                        keyboardType: TextInputType.emailAddress,
                        validator: (v) => (v == null || !_emailRx.hasMatch(v.trim()))
                            ? 'Enter a valid e‑mail'
                            : null,
                      ),
                      const SizedBox(height: 16),
                      TextFormField(
                        controller: _pwdCtl,
                        obscureText: _hidePwd,
                        decoration: _decor(
                          'Password',
                          Icons.lock_outline,
                          suffix: IconButton(
                            icon: Icon(
                                _hidePwd ? Icons.visibility : Icons.visibility_off),
                            onPressed: () =>
                                setState(() => _hidePwd = !_hidePwd),
                          ),
                        ),
                        validator: (v) => (v == null || v.isEmpty)
                            ? 'Enter password'
                            : null,
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 28),

                // ── Primary button ───────────────────────────────
                SizedBox(
                  width: double.infinity,
                  height: 52,
                  child: ElevatedButton(
                    onPressed: _busy ? null : _signIn,
                    child: _busy
                        ? const CircularProgressIndicator()
                        : const Text('LOG IN'),
                  ),
                ),
                const SizedBox(height: 12),
                TextButton(
                  onPressed: _busy
                      ? null
                      : () => Navigator.pushNamed(context, Routes.signup),
                  child: const Text('Create account'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}






